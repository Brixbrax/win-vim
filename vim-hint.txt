Insert mode tricks (help i_CTRL)
1. ESC or CTRL-[ or CTRL-C: go back to normal mode
2. Backspace or CTRL-H: delete previous character
3. CTRL-W: = normal mode's db
4. CTRL-U: = normal mode's d0
5. CTRL-J or CTRL-M: begin a new line
6. CTRL-R {0-9a-z...}: Insert the contents of a register. 
7. CTRL-R CTRL-P {0-9a-z...}: Insert the contents of a register and reindent.
8. CTRL-T or CTRL-D: insert or delete one indent.
9. CTRL-F: reindent the current line.
10. CTRL-O: enter normal mode temporary

Scroll Window (Normal Mode)
1. CTRL-E, CTRL-Y: scroll window one line up/down 

Visual Mode
1. vw, vb, ve, ...: select content
2. viw / vip / vi} / vi' / vi" : select content inside a word/paragraph/block/single quotes/double quotes
3. vf{char} / vt{char} / v/pattern / v?pattern / 
4. vwU / vwu / VU / vu : switch to upper case or lower case.
5. gv : select the previous selected area
6. o: switch the cursor to the other end of current selected area.
7. vit / gUit / guit : select content inside a xml node / upper case the value of a xml node / lower case the value of a xml node.
8. CTRL-V / CTRL-Q: switch to vitual block mode
9. Vr{char} : replace the whole line with the {char}
10. CTRL-V3jr{char} : replace the column the of selected lines with the {char}
11. aw, as, ap : select a word, sentence, a paragraph
12. ab, aB : select a block (), a block {}
    note: ab or ib 只作用於 (), 要將整個 {} 選起來可以用 aB or iB

Command-Line Mode
1. [range]d [x] : delete the specified lines [into register x]
2. [range]y [x] : yank specified lines [into register x]
3. [line]put [x] : put the text from register x after the specified line
4. [range]co {address} : copy the specified lines to below the lines specified by {address}
5. [range]m {address} : move the specified lines to below the lines specified by {address}
6. [range]j: join the specified lines
7. [range]normal {commands} : execute normal mode {commands} on each specified line.
8. [range]s/{pattern}/{string}/[flags] : replace occurrences of {pattern} with {string} on each specified line
9. [range]g/{pattern}/[cmd]
10. @: : repeat last Ex command (see :h @:)
11. CTRL-D : tab-complete your Ex commands 
12. <C-R><C-W> : insert the current word at the command prompt.
13. :his : show command line mode history
14. q/ : open the command-line window with history searches
15. q: : open the command-line window with history of Ex commands
16. ctrl-f : switch from command-line mode to the command-line window
17. read !{cmd} : execute {cmd} in the shell and insert its stnadard output below the cursor
18. [range]write !{cmd} : execute {cmd} in the shell with [range] lines as standard input
19. [range]!{filter} : filter the specified [range] through external program {filter}
20. 跑二個指令以上使用  \|  來分開各命令.  ( 用 \ 來跳脫 | 字元 )


Normal Mode
1. [I : display all lines that contain keyword under cursor.
   [^I : jump to 1st line that contains keyword under cursor.
   [i : display 1st line that contains keyword under cursor.
2. <'a : shift left up to mark a
   <% : shift left until matching (, [, or {
   << : shift line one shiftwidth to the left
   >iB or >aB : shift lines inside a block {}
3. d'a : delete up to mark a
4. g# : like "#", but without using "<\" and "\>"
   g* : like "*", but without using "<\" and "\>"
   gd : goto definition of word under cursor in current function
   gD : goto definition of word under cursor in current file
   gI : like "I", but always start in column 1
   gJ : join lines without inserting space
5. gUU or gUgU : make line uppercase
   guu or gugu : make line lowercase
   gU{motion} : make move text uppercase
   g~~ or g~{motion} : swap case for move text
6. ge or gE : go backwords to end of previous word or WORD
7. ^W ^B : go to bottom window
   ^W ^T : go to top window  
   ^W ^N : open new window
   ^W ^O : close all but current window (only)
   ^W ^X : exchange current window with window next
   ^W T  : move current window to a new tab page
   ^W v  : vertical split 
   ^W K  : move the current window to the topmost position
   ^W J  : Move the current window to be at the very bottom position.
8. ^W } : show tag under cursor in preview window
   ^W ^Z or ^W z: close preview window
9. ^W ] : split window and show tag under cursor
   ^W ^I : split window and then search for the first occurence of the word under the cursor.
10. ZZ : write and quit 
11. :help window-moving

Key mapping
1. :map c e : map c -> e in normal & visual mode
2. :map! c e : map c-> e in insert & cmd-line mode
3. :unmap c  : remove mapping c
   :unmap! c : remove mapping c
   :mapclear : remove all mapping
4. Command    Normal    Visual    Operator-Pending    Insert    Command-Line
   :map         O         O               O
   :nmap        O
   :vmap                  O
   :omap                                  O
   :map!                                                O            O
   :imap                                                O
   :cmap                                                             O
5. :noremap :  不要再遞迴展開 map.

Ex range:
. $ : the current line, the last line in file
% * : entire file, visual area

Search
1. /word1\|word2 : search word1 or word2
2. :bufdo /word/ : search word in all open files
3. /jo[ha]n : search john or joan

Replace
1. %s/^/hello/g : replace the begining of each line by hello
2. %s/$/harry/g : replace the end of each line by harry
3. %s/onward/forward/gi : replace onward by forward, case unsensitive
4. %s/ *$//g : delete all white spaces
5. g/string/d : delete all lines containing string
6. v/string/d or g!/string/d : delete all lines containing which did not contain string
7. %s:^\(.*\)\n\1$:\1:  : delete lines which appears twice
8. \u is uppercase, \l is lowercase.

Tabs
1. tabdo %s/foo/bar/g : execute a command in all tabs
2. tab ball : puts all open files in tabs
3. :h tabpage.txt
4. :gt :tabn  : go to the next tab page.
5. :gT :tabp  : go th the previous tab page.


Windows splitting
1. :sview file : same as :split in readonly mode
2. :hide : close current window
3. :only : close all windows, excepted current
4. :b 2 : open #2 buffer in this window


Registers (使用時都要加 " 在最前面)
1. " : The unnamed register
   The x, s, d{motion}, c{motion} and y{motion} commands
   all set the contents of the unnamed register. so, p = ""p
   也就是說, " register 的內容會被這些指令改寫.
2. 0 : The Yank register
   y{motion} commands copied the text into unnamed register and yank register.
   也就是說, 0 register 的內容只會被最近的 y 指令改寫.
   所以要貼最後一次 copy 的內容的話可以用 "0p 或是用 Ctrl-R0 
3. a - z : the named registers, 若用大寫 A ~ Z 代表是 append 而不是要 overwrite
   + or * : System Clipboard register
   % : name of the current file
   # : name of the alternate file
   . : last inserted text
   : : last Ex command
   / : last search pattern
   _ : the blackhole
   = : an expression
4. Ctrl-R = 123*321 : 輸入計算 123*321 的值.

Programming:
1. finding unmatched characters:
   [{ or ]{ : find the previous/next unmatched {
   [( or ]( : find the previous/next unmatched (
2. movement:
   [[ : 向上移動到第一行是 { 的地方
   ]] : 向下移動到第一行是 { 的地方
   [] : 向上移動到第一行是 } 的地方
   ][ : 向下移動到第一行是 } 的地方

Text-Objects
1. operator type + select type + region type
   operator type:  v / c / d  (visual/change/delete)
   select type:    i / a    (inner/an object)
   region type:   { / [ / ( / " / ' or } / ] / ) / " / '
                  {}  []  ()  ""  '' 
   other region type: w, s, b, B

Important topic
1. Text objects 

mode
1. :map    all
2. :nmap   normal mode
3. :vmap   visual mode
4. :imap   insert mode
5. :smap   select mode
6. :xmap   visual, select mode
7. :h map.txt

Others
1. :helpgrep
   search the entire document for a phrase.
2. :pwd 
   print working directory
3. prefixes for variables:
   $ for environment variables, ex: :echo $HOME
   & for options, ex: :echo &filetype
   @ for registers, ex: :echo @a
4. :help function-list for the list of functions available.

Vim Scripts:
1. has function 能用的參數
   :help feature-list
2. declare variable
   let i = 0
   let fruits = ['apple', 'mango', 'coconut']
   :echo fruits[i]
   see 'list manipulation' and 'dictionary manipulation' sections in :help function-list
3. while syntax:
   let i = 0
   while i < 5
       echo i
       let i += 1
   endwhile
4. for syntax
   for i in range(5)
       echo i
   endfor
   for fruit in fruits
       echo 'i like' fruit
   endfor
4. 
